public class RecursionTasks {

    public static void main(String[] args) {
/**
         * Задача 1
         * Дана строка, содержащая только десятичные цифры. Найти и вывести наибольшую цифру.
         * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков и
         * строка содержит только десятичные цифры.
         */
        int find = findMax("12145639", 0, 0);

        /**
         * Задача 2
         * Дана строка, содержащая цифры и английские буквы (большие и маленькие). Найти и вывести количество цифр.
         * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
         */
        String line = "74kz31n8pn26f2iv10c7u8x356gl73jlka67i929z08i5mnn35h0nN";
        System.out.println(searchLetter(line, 0, 0));

        /**
         * Задача 3
         * Сумма цифр числа
         * Дано натуральное число N. Вычислите сумму его цифр.
         * При решении этой задачи нельзя использовать строки, списки, массивы (ну и циклы, разумеется).
         */
        int num2 = 1234;
        System.out.println(sumInt(num2));

        /**
         * Задача 4
         * Дана строка, содержащая только английские буквы (большие и маленькие). Добавить символ ‘*’ (звездочка) между
         * буквами (перед первой буквой и после последней символ ‘*’ добавлять не нужно).
         * Входные данные
         * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
         */
        String line2 = "LItBeoFLcSGBOFQxMHoIuDDWcqcVgkcRoAeocX0";
        System.out.println(StarString(line2, 0));

      /**
     * Задача 5
     * Функция Аккермана
     * В теории вычислимости важную роль играет функция Аккермана A(m,n), определенная следующим образом:
     * Даны два целых неотрицательных числа m и n, каждое в отдельной строке. Выведите A(m,n).
     */
      }

  /**
     * Задача 1
     * Дана строка, содержащая только десятичные цифры. Найти и вывести наибольшую цифру.
     * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков и
     * строка содержит только десятичные цифры.
     */
    public static int findMax(String line, int index, int max) {
        if (index == line.length()) {
            return max;
        }
        int num = line.charAt(index) - '0';
        if (num > max) {
            max = num;
        }
        return findMax(line, index + 1, max);
    }

    /**
     * Задача 2
     * Дана строка, содержащая цифры и английские буквы (большие и маленькие). Найти и вывести количество цифр.
     * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
     */
    public static int searchLetter(String line, int index, int count) {
        if (index == line.length()) {
            return count;
        }
        if (Character.isLetter(line.charAt(index))) {
            count++;
        }
        return searchLetter(line, index + 1, count);
    }

    /**
     * Задача 3
     * Сумма цифр числа
     * Дано натуральное число N. Вычислите сумму его цифр.
     * При решении этой задачи нельзя использовать строки, списки, массивы (ну и циклы, разумеется).
     */
    public static int sumInt(int num) {
        if (num == 0) {
            return 0;
        }

        return num % 10 + sumInt(num / 10);
    }

    /**
     * Задача 4
     * Дана строка, содержащая только английские буквы (большие и маленькие). Добавить символ ‘*’ (звездочка) между
     * буквами (перед первой буквой и после последней символ ‘*’ добавлять не нужно).
     * Входные данные
     * Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
     */
    //должно получиться так L*I*t*B*e*o*F*L*c*S*G*B*O*F*Q*x*M*H*o*I*u*D*D*W*c*q*c*V*g*k*c*R*o*A*e*o*c*X*O

    public static String StarString(String line, int index) {
        if (line.length() == index) {
            return line;
        }
        StringBuilder sb = new StringBuilder(line);

        if (Character.isLetter(sb.charAt(index))) {
            sb.insert(index + 1, '*');
            return StarString(sb.toString(), index + 2);
        } else {
            return StarString(sb.toString(), index + 1);
        }
    }

    /**
     * Задача 5
     * Функция Аккермана
     * В теории вычислимости важную роль играет функция Аккермана A(m,n), определенная следующим образом:
     * Даны два целых неотрицательных числа m и n, каждое в отдельной строке. Выведите A(m,n).
     */
